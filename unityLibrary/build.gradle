apply plugin: 'com.android.library'


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
	implementation("com.google.guava:guava:31.0.1-jre")
	implementation("commons-io:commons-io:2.11.0")
	implementation("commons-codec:commons-codec:1.15")
	implementation("com.microsoft.azure:msal4j:1.17.0")
    implementation(project(':')) {
        transitive = false
    }
    implementation(name: 'BAuthLib-1.0.0', ext:'aar')
    implementation(name: 'tob_api-release', ext:'aar')
    implementation(name: 'tobservicelib-release', ext:'aar')
    implementation project(':wrapper:unityLibrary:xrmanifest.androidlib')
}

android {
    ndkVersion = "21.3.6528147"
    compileSdkVersion 32
    buildToolsVersion '30.0.3'

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        minSdkVersion 29
        targetSdkVersion 32
        ndk {
            abiFilters 'arm64-v8a'
            stl "c++_shared"
        }
        versionCode 26
        versionName '5.1.0-rc6'
        consumerProguardFiles 'proguard-unity.txt'
    }

    lintOptions {
        abortOnError false
    }

    packagingOptions {
        pickFirst '**/*.so'
    }
    
    aaptOptions {
        noCompress = ['.unity3d', '.ress', '.resource', '.obb', '.bundle', '.unityexp'] + unityStreamingAssets.tokenize(', ')
        ignoreAssetsPattern = "!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~"
    }

    packagingOptions {
        doNotStrip '*/arm64-v8a/*.so'
    }
}

def getSdkDir() {
    Properties local = new Properties()
    String dir
    try {
        dir = local.load(new FileInputStream("${rootDir}/local.properties")).getProperty('sdk.dir')
    } catch(NullPointerException ex) {
        dir = "${System.getenv().ANDROID_SDK_ROOT}"
    }
    return dir
}

def BuildIl2Cpp(String workingDir, String configuration, String architecture, String abi, String[] staticLibraries) {
    def commandLineArgs = []
    commandLineArgs.add("--compile-cpp")
    commandLineArgs.add("--platform=Android")
    commandLineArgs.add("--architecture=" + architecture)
    commandLineArgs.add("--outputpath=" + workingDir + "/src/main/jniLibs/" + abi + "/libil2cpp.so")
    commandLineArgs.add("--libil2cpp-static")
    commandLineArgs.add("--baselib-directory=" + workingDir + "/src/main/jniStaticLibs/" + abi)
    commandLineArgs.add("--incremental-g-c-time-slice=3")
    commandLineArgs.add("--configuration=" + configuration)
    commandLineArgs.add("--dotnetprofile=unityaot-linux")
    commandLineArgs.add("--profiler-report")
    commandLineArgs.add("--profiler-output-file=" + workingDir + "/build/il2cpp_"+ abi + "_" + configuration + "/il2cpp_conv.traceevents")
    commandLineArgs.add("--print-command-line")
    commandLineArgs.add("--generatedcppdir=" + workingDir + "/src/main/Il2CppOutputProject/Source/il2cppOutput")
    commandLineArgs.add("--cachedirectory=" + workingDir + "/build/il2cpp_"+ abi + "_" + configuration + "/il2cpp_cache")
    commandLineArgs.add("--tool-chain-path=" + android.ndkDirectory)
    staticLibraries.eachWithIndex {fileName, i->
        commandLineArgs.add("--additional-libraries=" + workingDir + "/src/main/jniStaticLibs/" + abi + "/" + fileName)
    }
    def executableExtension = ""
    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
        executableExtension = ".exe"
        commandLineArgs = commandLineArgs*.replace('\"', '\\\"')
    }
    exec {
        executable workingDir + "/src/main/Il2CppOutputProject/IL2CPP/build/deploy/il2cpp" + executableExtension
        args commandLineArgs
        environment "ANDROID_SDK_ROOT", getSdkDir()
    }
    delete workingDir + "/src/main/jniLibs/" + abi + "/libil2cpp.sym.so"
    ant.move(file: workingDir + "/src/main/jniLibs/" + abi + "/libil2cpp.dbg.so", tofile: workingDir + "/symbols/" + abi + "/libil2cpp.so")
}

android {
    tasks.register('BuildIl2CppTask') {
        doLast {
            BuildIl2Cpp(project(':wrapper:unityLibrary').projectDir.toString().replaceAll('\\\\', '/'), 'Release', 'arm64', 'arm64-v8a', [] as String[]);
        }
    }
    afterEvaluate {
        if (project(':wrapper:unityLibrary').tasks.findByName('mergeDebugJniLibFolders'))
            project(':wrapper:unityLibrary').mergeDebugJniLibFolders.dependsOn BuildIl2CppTask
        if (project(':wrapper:unityLibrary').tasks.findByName('mergeReleaseJniLibFolders'))
            project(':wrapper:unityLibrary').mergeReleaseJniLibFolders.dependsOn BuildIl2CppTask
    }
    sourceSets {
        main {
            jni.srcDirs = ["src/main/Il2CppOutputProject"]
        }
    }
}



